class Solution {
    // Function to find distance of nearest 1 in the grid for each cell.
    public int[][] nearest(int[][] grid) {
        int n = grid.length, m = grid[0].length;
        int[][] dist = new int[n][m];
        boolean[][] visited = new boolean[n][m];
        Queue<int[]> q = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1) {
                    q.add(new int[]{i, j, 0}); 
                    visited[i][j] = true;
                }
            }
        }
        int[] dx={0,0,-1,1};
        int[] dy={-1,1,0,0};
        while(!q.isEmpty()){
            int[] curr=q.poll();
            int x=curr[0];
            int y=curr[1];
            int d=curr[2];
            dist[x][y]=d;
            for (int dir=0;dir<dx.length;dir++){
                int nx=x+dx[dir];
                int ny=y+dy[dir];
                if(nx>=0 && ny>=0 && nx<n && ny<m && !visited[nx][ny]){
                    visited[nx][ny]=true;
                    q.add(new int[]{nx,ny,d+1});
                }
            }
        }
        return dist;
    }
}
